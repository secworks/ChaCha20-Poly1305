#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#=======================================================================
#
# ch20p1305_test.py
# -----------------
# Simple model of the Chacha20-Poly1305 construction as specified
# in RFC 7539 (https://tools.ietf.org/html/rfc7539). The model
# uses the test vectors in the RFC.
#
# The model is used as a reference for the HW implementation.
# The code follows the structure of the HW implementation as much
# as possible.
#
#
# Copyright (c) 2016 Secworks Sweden AB
# Author: Joachim Str√∂mbergson
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#=======================================================================

#-------------------------------------------------------------------
# Python module imports.
#-------------------------------------------------------------------
import sys
from chacha_test import chacha_encryption
from chacha_test import chacha_block
from chacha_test import l2lw32
from chacha_test import w32bl
from poly1305_test import print_bytelist


#-------------------------------------------------------------------
# Constants.
#-------------------------------------------------------------------


#-------------------------------------------------------------------
# aead_chacha20_poly1305_test()
#
# Test that we can perform complete AEAD encryption and tag
# generation. Testvectors from 2.8.2 in the RFC.
#-------------------------------------------------------------------
def aead_chacha20_poly1305_test():
    plaintext = [0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
                 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
                 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
                 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
                 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
                 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
                 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
                 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
                 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
                 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
                 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
                 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
                 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
                 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
                 0x74, 0x2e]

    aad = [0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7]

    key = [0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
           0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
           0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
           0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f]

    iv = [0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47]

    common = [07, 0x00, 0x00, 0x00]

    ciphertext = [0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
                  0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
                  0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
                  0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
                  0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
                  0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
                  0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
                  0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
                  0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
                  0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
                  0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
                  0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
                  0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
                  0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
                  0x61, 0x16]

    aead_construct = [0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
                      0xc4, 0xc5, 0xc6, 0xc7, 0x00, 0x00, 0x00, 0x00,
                      0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
                      0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
                      0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
                      0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
                      0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
                      0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
                      0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
                      0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
                      0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
                      0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
                      0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
                      0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
                      0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
                      0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
                      0x61, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

    tag = [0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a,
           0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91]


#-------------------------------------------------------------------
# poly1305_keygen_test()
#
# Test that we can generate a correct Poly1305 key using chacha20.
# Testvectors from 2.6.2 in the RFC.
#-------------------------------------------------------------------
def poly1305_keygen_test():
    key_bytes = [0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
                 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
                 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f]
    key = l2lw32(key_bytes)

    nonce_bytes = [0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
                   0x04, 0x05, 0x06, 0x07]
    nonce = l2lw32(nonce_bytes)

    counter = 0x00000000;

    print("*** Test of the Poly1305 key generation using ChaCha20 block function.")

    block = chacha_block(key, counter, nonce)
    print("Generated block bytes:")
    block_bytes = w32bl(block)
    print_bytelist(block_bytes)
    print()
    p1305_key_bytes = block_bytes[0:32]
    print("Generated key bytes:")
    print_bytelist(p1305_key_bytes)
    print()


#-------------------------------------------------------------------
# ch20p1305_tests()
#-------------------------------------------------------------------
def ch20p1305_tests():
    key = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

    counter = 0x00000001

    nonce = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a,
             0x00, 0x00, 0x00, 0x00]

    ptext = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

    print("*** Test of the Ch20P1305 AEAD function.")
    ciphertext = chacha_encryption(key, counter, nonce, ptext)
    print("Ciphertext:")
    print(ciphertext)
    print()

#-------------------------------------------------------------------
# main()
#
# If executed tests the ChaCha class using known test vectors.
#-------------------------------------------------------------------
def main():
    ch20p1305_tests()
    poly1305_keygen_test()


#-------------------------------------------------------------------
# __name__
# Python thingy which allows the file to be run standalone as
# well as parsed from within a Python interpreter.
#-------------------------------------------------------------------
if __name__=="__main__":
    # Run the main function.
    sys.exit(main())

#=======================================================================
# EOF ch20p1305_test.py
#=======================================================================
